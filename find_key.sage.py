

# This file was *autogenerated* from the file /workspace/find_key.sage
from sage.all_cmdline import *   # import sage library

_sage_const_14668080038311483271 = Integer(14668080038311483271); _sage_const_11315841881544731102 = Integer(11315841881544731102); _sage_const_2283439871732792326 = Integer(2283439871732792326); _sage_const_6800685968958241983 = Integer(6800685968958241983); _sage_const_6426158106328779372 = Integer(6426158106328779372); _sage_const_9681186993951502212 = Integer(9681186993951502212); _sage_const_4729583429936371197 = Integer(4729583429936371197); _sage_const_9934441408437898498 = Integer(9934441408437898498); _sage_const_12454838789798706101 = Integer(12454838789798706101); _sage_const_1137624354220162514 = Integer(1137624354220162514); _sage_const_8961427323294527914 = Integer(8961427323294527914); _sage_const_12212265161975165517 = Integer(12212265161975165517); _sage_const_8264257544674837561 = Integer(8264257544674837561); _sage_const_10531819068765930248 = Integer(10531819068765930248); _sage_const_4088354401871232602 = Integer(4088354401871232602); _sage_const_14653951889442072670 = Integer(14653951889442072670); _sage_const_6045978019175462652 = Integer(6045978019175462652); _sage_const_11202714988272207073 = Integer(11202714988272207073); _sage_const_13562937263226951112 = Integer(13562937263226951112); _sage_const_6648446245634067896 = Integer(6648446245634067896); _sage_const_13902820281072641413 = Integer(13902820281072641413); _sage_const_1046075193917103481 = Integer(1046075193917103481); _sage_const_3617988773170202613 = Integer(3617988773170202613); _sage_const_3590111338369894405 = Integer(3590111338369894405); _sage_const_2646640112163975771 = Integer(2646640112163975771); _sage_const_5966864698750134707 = Integer(5966864698750134707); _sage_const_1785348659555163021 = Integer(1785348659555163021); _sage_const_3612773974290420260 = Integer(3612773974290420260); _sage_const_8587341808081935796 = Integer(8587341808081935796); _sage_const_4393730037042586815 = Integer(4393730037042586815); _sage_const_10490463205723658044 = Integer(10490463205723658044); _sage_const_10457678631610076741 = Integer(10457678631610076741); _sage_const_1645527195687648140 = Integer(1645527195687648140); _sage_const_13013316081830726847 = Integer(13013316081830726847); _sage_const_12925223531522879912 = Integer(12925223531522879912); _sage_const_5478687620744215372 = Integer(5478687620744215372); _sage_const_9878636900393157276 = Integer(9878636900393157276); _sage_const_13274969755872629366 = Integer(13274969755872629366); _sage_const_3231582918568068174 = Integer(3231582918568068174); _sage_const_7045188483430589163 = Integer(7045188483430589163); _sage_const_5126509884591016427 = Integer(5126509884591016427); _sage_const_4914941908205759200 = Integer(4914941908205759200); _sage_const_7480989013464904670 = Integer(7480989013464904670); _sage_const_5860406622199128154 = Integer(5860406622199128154); _sage_const_8016615177615097542 = Integer(8016615177615097542); _sage_const_13266674393818320551 = Integer(13266674393818320551); _sage_const_3005316032591310201 = Integer(3005316032591310201); _sage_const_6624508725257625760 = Integer(6624508725257625760); _sage_const_7972954954270186094 = Integer(7972954954270186094); _sage_const_5331046349070112118 = Integer(5331046349070112118); _sage_const_6127026494304272395 = Integer(6127026494304272395); _sage_const_1 = Integer(1); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_0 = Integer(0); _sage_const_10000 = Integer(10000); _sage_const_2 = Integer(2); _sage_const_62 = Integer(62)
from sage.all import *

# 给定的值
p = _sage_const_14668080038311483271 
P = GF(p)

C = matrix(P, [
    [_sage_const_11315841881544731102 , _sage_const_2283439871732792326 , _sage_const_6800685968958241983 , _sage_const_6426158106328779372 , _sage_const_9681186993951502212 ],
    [_sage_const_4729583429936371197 , _sage_const_9934441408437898498 , _sage_const_12454838789798706101 , _sage_const_1137624354220162514 , _sage_const_8961427323294527914 ],
    [_sage_const_12212265161975165517 , _sage_const_8264257544674837561 , _sage_const_10531819068765930248 , _sage_const_4088354401871232602 , _sage_const_14653951889442072670 ],
    [_sage_const_6045978019175462652 , _sage_const_11202714988272207073 , _sage_const_13562937263226951112 , _sage_const_6648446245634067896 , _sage_const_13902820281072641413 ],
    [_sage_const_1046075193917103481 , _sage_const_3617988773170202613 , _sage_const_3590111338369894405 , _sage_const_2646640112163975771 , _sage_const_5966864698750134707 ]
])

D = matrix(P, [
    [_sage_const_1785348659555163021 , _sage_const_3612773974290420260 , _sage_const_8587341808081935796 , _sage_const_4393730037042586815 , _sage_const_10490463205723658044 ],
    [_sage_const_10457678631610076741 , _sage_const_1645527195687648140 , _sage_const_13013316081830726847 , _sage_const_12925223531522879912 , _sage_const_5478687620744215372 ],
    [_sage_const_9878636900393157276 , _sage_const_13274969755872629366 , _sage_const_3231582918568068174 , _sage_const_7045188483430589163 , _sage_const_5126509884591016427 ],
    [_sage_const_4914941908205759200 , _sage_const_7480989013464904670 , _sage_const_5860406622199128154 , _sage_const_8016615177615097542 , _sage_const_13266674393818320551 ],
    [_sage_const_3005316032591310201 , _sage_const_6624508725257625760 , _sage_const_7972954954270186094 , _sage_const_5331046349070112118 , _sage_const_6127026494304272395 ]
])

print("分析矩阵特征...")
# 分析最后一行（v5 * 0的结果）
last_row_C = vector(P, C.row(-_sage_const_1 ))
last_row_D = vector(P, D.row(-_sage_const_1 ))
print(f"C的最后一行: {last_row_C}")
print(f"D的最后一行: {last_row_D}")

# 计算最小多项式
min_poly_C = C.minimal_polynomial()
print(f"\nC的最小多项式: {min_poly_C}")

# 计算特征多项式和特征值
char_poly_C = C.characteristic_polynomial()
eig_C = C.eigenvalues()
eig_D = D.eigenvalues()
print(f"\nC的特征值: {eig_C}")
print(f"D的特征值: {eig_D}")

# 尝试寻找模式
print("\n寻找数学关系...")
for i in range(_sage_const_5 ):
    ratio = D[_sage_const_4 ][i] / C[_sage_const_4 ][i] if C[_sage_const_4 ][i] != _sage_const_0  else "undefined"
    print(f"D[4][{i}] / C[4][{i}] = {ratio}")

# Baby-step Giant-step方法搜索key
def bsgs_matrix(base, target, p, lower_bound):
    m = isqrt(p - lower_bound) + _sage_const_1 
    # Baby steps
    baby_steps = {}
    current = matrix.identity(P, _sage_const_5 )
    for j in range(m):
        if j % _sage_const_10000  == _sage_const_0 :
            print(f"Baby step: {j}")
        baby_steps[tuple(current[_sage_const_4 ])] = j
        current *= base

    # Giant steps
    giant = base**(-m)
    current = target
    for i in range((p - lower_bound) // m + _sage_const_1 ):
        if i % _sage_const_10000  == _sage_const_0 :
            print(f"Giant step: {i}")
        curr_tuple = tuple(current[_sage_const_4 ])
        if curr_tuple in baby_steps:
            result = i * m + baby_steps[curr_tuple]
            if result >= lower_bound:
                return result
        current *= giant
    return None

print("\n开始BSGS搜索...")
key = bsgs_matrix(C, D, p, _sage_const_2 **_sage_const_62 )
if key:
    print(f"找到可能的key: {key}")
    # 验证
    if C**key == D:
        print("验证成功！")
    else:
        print("验证失败。")

